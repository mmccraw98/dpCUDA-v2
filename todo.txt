STEPS TO BUILD ON SLURM SERVER:

salloc -p gpu_devel --gres=gpu:1 --mem=8G -t 4:00:00

module purge
module load GCC/10.2.0
module load CUDA/11.8.0
module load CMake/3.18.4-GCCcore-10.2.0

# downloaded nlohmann json locally and compiled it

# change the cmake to the grace_cmake file, make sure the gpu architecture is set to match the gpu you are using
# gpu devel uses a5000, gpu uses some rtx nonsense, there are others that use a100s and whatnot
# "75;80;86;89;90" gives mostly full coverage but takes a while to compile

cd /home/mrm252/project/dpCUDA2/dpCUDA-v2
rm -rf build
mkdir build && cd build

cmake \
  -DCMAKE_PREFIX_PATH=/home/mrm252/project/dpCUDA2/nlohmann_json/install \
  -DCMAKE_CXX_COMPILER=$(which g++) \
  -DCMAKE_CUDA_COMPILER=$(which nvcc) \
  -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.8 \
  ..

make -j1 VERBOSE=1


- consolidate kernels (zero force and potential energy into force calculation)
- cell list binary search
- replica mode




- add integrators
- damped nve, nose hoover, adam, conjugate gradient
- add logger
- add particle factory
- add integrator factory
- initialize from: (random pos, given pos, file, etc.)
- save script name in the config file
- convert one particle type into another
- test setting member functions to final to save speed
- add io (integrators will have things saved too)
- make simulation scripts (be able to easily add new arguments to scripts / protocols / functions without changing the code) (should have backwards / forwards compatibility with arguments - if something isn't there and isn't required, it should work, if something isn't there that needs to be there, it should crash with a clear error message)
- make simulation launchers and post-processing (management) in dpTools
- split the cuda kernels into separate files for each purpose
- organize the member function definitions in particle.h/.cu
- figure out how best to lay out the grid, theread, and block dimensions
- make tests
- add a cell list
- try to go back to crtp classes for the particles and integrators

- make a readme with changes

mkdir -p build
cd build
cmake ..
make
./main_exec

- planned v2.1.0:
- migrate from virtual base classes to crtp classes
- incorporate cell-lists

- planned v2.0.1:
- add rigid body particles

- v2.0.0:
- changes:
- switched to cmake
- different particle types are now derived from a virtual base class with many virtual member functions defined
- integrators are similarly defined from a virtual base class - similar to the original pyCUDA
- no magic numbers, everything is templated and comes from a configuration files
- objects are constructed via factory classes
- scripts / protocols are defined universally in terms of the base classes